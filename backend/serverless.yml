service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-tracing
  - serverless-plugin-canary-deployments
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-existing-s3

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    # DynamoDB resources
    TODOS_TABLE_NAME: ${self:custom.todosTableName}-${self:provider.stage}
    TODOS_USERID_INDEX_NAME: ${self:custom.todosIndexName}-${self:provider.stage}

    # Attachments S3 bucket and related config
    ATTACHMENTS_BUCKET: ${self:custom.attachmentsBucketName}-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

    # JWKS secrets
    AUTH0_SECRET_ID: ${self:custom.auth0SecretId}-${self:provider.stage}
    AUTH0_SECRET_KID_FIELD: AUTH0_KID
    AUTH0_SECRET_JWKS_URL_FIELD: AUTH0_JWKS_URL

    # SQS bucket config
    ATTACHMENTS_QUEUE_URL: ${self:custom.attachmentsQueueUrl}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:PutBucketNotification
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

custom:
  awsAccountId: ${opt:awsAccountId}

  auth0SecretId: ${opt:auth0SecretId}
  auth0SecretArn: ${opt:auth0SecretArn}
  auth0KmsKeyArn: ${opt:auth0KmsKeyArn}

  todosTableName: ${opt:todosTableName}
  todosIndexName: ${opt:todosIndexName}

  attachmentsQueueName: ${opt:attachmentsQueueName}
  attachmentsQueueArn: arn:aws:sqs:${self:provider.region}:${self:custom.awsAccountId}:${self:custom.attachmentsQueueName}-${self:provider.stage}
  attachmentsBucketName: ${opt:attachmentsBucketName}
  attachmentsQueueUrl: ${opt:attachmentsQueueUrl}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo Api
        description: Serverless application for so-called Todo
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: ${self:custom.auth0SecretArn}
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: ${self:custom.auth0KmsKeyArn}

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}/index/${self:provider.environment.TODOS_USERID_INDEX_NAME}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Todo item
            description: Create a new Todo item
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}


  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Todo item
            description: Update a Todo item
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth

  attachmentsUpload:
    handler: src/lambda/s3/attachmentsUpload.handler
    events:
      - sqs:
          arn: ${self:custom.attachmentsQueueArn}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:ReceiveMessage
          - sqs:GetQueueUrl
        Resource: ${self:custom.attachmentsQueueArn}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE_NAME}

  attachmentsRemove:
    handler: src/lambda/dynamodb/attachmentsRemove.handler
    events:
      - stream:
        type: dynamodb
        arn: ${self:custom.attachmentsQueueArn}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:HeadObject
          - s3:GetObject
          - s3:GetObjectAcl
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false